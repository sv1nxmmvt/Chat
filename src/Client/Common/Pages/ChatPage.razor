@page "/chat"

@using Microsoft.AspNetCore.Components.Web

@inject AuthService Auth
@inject ChatService Chat
@inject NavigationManager Navigation

@implements IDisposable

<div class="chat-container">
    <div class="header">
        <span>Чат - @Auth.Username</span>
        <button @onclick="Logout">Выйти</button>
    </div>

    <div class="messages" @ref="messagesContainer">
        @foreach (var msg in Chat.Messages)
        {
            <div class="message @(msg.Username == Auth.Username ? "own" : "")">
                <div class="username">@msg.Username</div>
                <div class="content">@msg.Content</div>
                <div class="time">@msg.Timestamp.ToString("HH:mm")</div>
            </div>
        }
    </div>

    <div class="input-area">
        <input @bind="newMessage" @onkeypress="OnKeyPress" placeholder="Введите сообщение..." />
        <button @onclick="SendMessage" disabled="@(string.IsNullOrWhiteSpace(newMessage) || !Chat.IsConnected)">
            Отправить
        </button>
    </div>
</div>

@code {
    private string newMessage = "";
    private ElementReference messagesContainer;

    protected override async Task OnInitializedAsync()
    {
        if (!Auth.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
            return;
        }

        Chat.PropertyChanged += OnMessagesChanged;
        await Chat.ConnectAsync(Auth.Token!);
    }

    private void OnMessagesChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
            _ = ScrollToBottom();
        });
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessage))
        {
            await Chat.SendMessageAsync(newMessage);
            newMessage = "";
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50);
        try
        {
            await messagesContainer.FocusAsync();
        }
        catch
        {

        }
    }

    private async Task Logout()
    {
        await Chat.DisconnectAsync();
        Auth.Logout();
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        Chat.PropertyChanged -= OnMessagesChanged;
        _ = Chat.DisconnectAsync();
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 25px;
        background: rgba(255, 255, 255, 0.95);
        border-bottom: 1px solid rgba(0, 0, 0, 0.08);
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
        font-weight: 600;
        color: #2c3e50;
    }

    .messages {
        flex: 1;
        overflow-y: auto;
        padding: 25px;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .message {
        max-width: 75%;
        padding: 15px 18px;
        border-radius: 18px;
        background: rgba(255, 255, 255, 0.95);
        box-shadow: 0 3px 12px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.5);
        transition: transform 0.2s ease;
    }

    .message:hover {
        transform: translateY(-1px);
    }

    .message.own {
        align-self: flex-end;
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        border-radius: 18px 18px 5px 18px;
    }

    .message:not(.own) {
        border-radius: 18px 18px 18px 5px;
    }

    .username {
        font-weight: 600;
        font-size: 12px;
        margin-bottom: 6px;
        color: #667eea;
        opacity: 0.8;
    }

    .message.own .username {
        color: rgba(255, 255, 255, 0.9);
    }

    .content {
        margin-bottom: 6px;
        font-size: 14px;
        line-height: 1.4;
        word-wrap: break-word;
    }

    .time {
        font-size: 10px;
        opacity: 0.6;
        font-weight: 500;
        text-align: right;
    }

    .message:not(.own) .time {
        color: #95a5a6;
    }

    .input-area {
        display: flex;
        padding: 20px 25px;
        gap: 12px;
        background: rgba(255, 255, 255, 0.95);
        border-top: 1px solid rgba(0, 0, 0, 0.08);
        box-shadow: 0 -2px 15px rgba(0, 0, 0, 0.05);
    }

    .input-area input {
        flex: 1;
        padding: 15px 20px;
        border: 2px solid #e9ecef;
        border-radius: 25px;
        font-size: 14px;
        outline: none;
        transition: all 0.3s ease;
        background: white;
    }

    .input-area input:focus {
        border-color: #4facfe;
        box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.1);
    }

    .input-area button {
        padding: 15px 25px;
        border: none;
        border-radius: 25px;
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        cursor: pointer;
        font-weight: 600;
        font-size: 14px;
        transition: all 0.3s ease;
        min-width: 100px;
    }

    .input-area button:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(79, 172, 254, 0.3);
    }

    .input-area button:disabled {
        background: #bdc3c7;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    .header button {
        padding: 10px 18px;
        border: none;
        border-radius: 8px;
        background: #e74c3c;
        color: white;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .header button:hover {
        background: #c0392b;
        transform: translateY(-1px);
    }

    .messages::-webkit-scrollbar {
        width: 6px;
    }

    .messages::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
    }

    .messages::-webkit-scrollbar-thumb {
        background: rgba(0, 0, 0, 0.2);
        border-radius: 3px;
    }

    .messages::-webkit-scrollbar-thumb:hover {
        background: rgba(0, 0, 0, 0.3);
    }
</style>
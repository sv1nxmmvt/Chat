@page "/chat"

@using Microsoft.AspNetCore.Components.Web

@inject AuthService Auth
@inject ChatService Chat
@inject NavigationManager Navigation

@implements IDisposable

<div class="container-fluid vh-100 d-flex flex-column p-0 bg-light">
    <!-- Header -->
    <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom shadow-sm">
        <div class="container-fluid px-4">
            <span class="navbar-brand mb-0 h1 text-primary">
                <i class="bi bi-chat-dots-fill me-2"></i>
                Чат - <span class="fw-normal text-secondary">@Auth.Username</span>
            </span>

            <div class="navbar-nav">
                <span class="navbar-text me-3">
                    <span class="badge @(Chat.IsConnected ? "bg-success" : "bg-danger")">
                        <i class="bi @(Chat.IsConnected ? "bi-wifi" : "bi-wifi-off") me-1"></i>
                        @(Chat.IsConnected ? "Онлайн" : "Офлайн")
                    </span>
                </span>
                <button @onclick="Logout" class="btn btn-outline-danger">
                    <i class="bi bi-box-arrow-right me-1"></i>
                    Выйти
                </button>
            </div>
        </div>
    </nav>

    <!-- Messages Area -->
    <div class="flex-grow-1 overflow-auto p-3" style="max-height: calc(100vh - 140px);" @ref="messagesContainer">
        <div class="container-fluid">
            @if (!Chat.Messages.Any())
            {
                <div class="text-center text-muted mt-5">
                    <i class="bi bi-chat-text display-1 mb-3"></i>
                    <h5>Начните общение!</h5>
                    <p>Здесь пока нет сообщений. Отправьте первое сообщение.</p>
                </div>
            }
            else
            {
                @foreach (var msg in Chat.Messages)
                {
                    <div class="row mb-3 @(msg.Username == Auth.Username ? "justify-content-end" : "justify-content-start")">
                        <div class="col-12 col-md-8 col-lg-6">
                            <div class="card border-0 shadow-sm @(msg.Username == Auth.Username ? "bg-primary text-white" : "bg-white")">
                                <div class="card-body p-3">
                                    @if (msg.Username != Auth.Username)
                                    {
                                        <div class="d-flex align-items-center mb-2">
                                            <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 24px; height: 24px;">
                                                <i class="bi bi-person-fill text-white" style="font-size: 12px;"></i>
                                            </div>
                                            <small class="text-primary fw-semibold">@msg.Username</small>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="d-flex align-items-center justify-content-end mb-2">
                                            <small class="text-white-50 fw-semibold me-2">Вы</small>
                                            <div class="bg-white bg-opacity-25 rounded-circle d-flex align-items-center justify-content-center" style="width: 24px; height: 24px;">
                                                <i class="bi bi-person-fill text-white" style="font-size: 12px;"></i>
                                            </div>
                                        </div>
                                    }

                                    <p class="mb-2">@msg.Content</p>

                                    <div class="@(msg.Username == Auth.Username ? "text-end" : "text-start")">
                                        <small class="@(msg.Username == Auth.Username ? "text-white-50" : "text-muted")">
                                            <i class="bi bi-clock me-1"></i>
                                            @msg.Timestamp.ToString("HH:mm")
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Input Area -->
    <div class="bg-white border-top shadow-sm p-3">
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <div class="input-group input-group-lg">
                        <span class="input-group-text bg-light border-end-0">
                            <i class="bi bi-chat-fill text-muted"></i>
                        </span>
                        <input @bind="newMessage"
                               @onkeypress="OnKeyPress"
                               type="text"
                               class="form-control border-start-0 border-end-0"
                               placeholder="Введите сообщение..."
                               disabled="@(!Chat.IsConnected)" />
                        <button @onclick="SendMessage"
                                type="button"
                                class="btn btn-primary px-4"
                                disabled="@(string.IsNullOrWhiteSpace(newMessage) || !Chat.IsConnected)">
                            <i class="bi bi-send-fill me-1"></i>
                            Отправить
                        </button>
                    </div>

                    @if (!Chat.IsConnected)
                    {
                        <div class="alert alert-warning mt-2 mb-0 d-flex align-items-center">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            <small>Соединение потеряно. Попробуйте перезагрузить страницу.</small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string newMessage = "";
    private ElementReference messagesContainer;

    protected override async Task OnInitializedAsync()
    {
        if (!Auth.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
            return;
        }

        Chat.PropertyChanged += OnMessagesChanged;
        await Chat.ConnectAsync(Auth.Token!);
    }

    private void OnMessagesChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
            _ = ScrollToBottom();
        });
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessage) && Chat.IsConnected)
        {
            await Chat.SendMessageAsync(newMessage);
            newMessage = "";
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newMessage) && Chat.IsConnected)
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50);
        try
        {
            await messagesContainer.FocusAsync();
        }
        catch
        {
            // Игнорируем ошибки фокусировки
        }
    }

    private async Task Logout()
    {
        await Chat.DisconnectAsync();
        Auth.Logout();
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        Chat.PropertyChanged -= OnMessagesChanged;
        _ = Chat.DisconnectAsync();
    }
}